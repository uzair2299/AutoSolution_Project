@model AutoSolution.Services.ViewModel.PartsProductsViewModel
<div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
    <div class="kt-portlet kt-portlet--mobile">
        <div class="kt-portlet__head kt-portlet__head--lg">
            <div class="kt-portlet__head-label">
                <span class="kt-portlet__head-icon">
                    <i class="fa fa-car-side"></i>
                </span>
                <h3 class="kt-portlet__head-title">
                    Add New Part/Product
                </h3>
            </div>
        </div>
        <div class="kt-portlet__body">
            <form class="kt-form kt-form--fit kt-margin-b-20" id="AddNewPartsProducts">
                @Html.AntiForgeryToken()
                <div class="kt-login__title text-center mt-3 kt-mb-15">
                    <div class="kt-divider">
                        <span></span>
                        <h4 class="p-3"><span>Part/Product Information</span></h4>
                        <span></span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PartsProductName, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="fab fa-whmcs"></i></span></div>
                                @Html.EditorFor(model => model.PartsProductName, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="flaticon-price-tag"></i></span></div>
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedPartsProductCategory, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="flaticon-squares-1"></i></span></div>
                                @Html.DropDownListFor(x => Model.SelectedPartsProductCategory, Model.PartsProductsCategoryList as SelectList, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedPartsProductSubCategory, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="flaticon-squares-1"></i></span></div>
                                @Html.DropDownListFor(x => Model.SelectedPartsProductSubCategory, Model.PartsProductsSubCategoryList as SelectList, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedPartProductManufacturer, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="flaticon-squares-1"></i></span></div>
                                @Html.DropDownListFor(x => Model.SelectedPartProductManufacturer, Model.PartProductManufacturerList as SelectList, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group ">
                            <label class="col-form-label">Product Images</label>
                            <div class="input-group">
                                <input type="file" class="form-control" aria-describedby="basic-addon1" multiple id="ProductImages">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" id="imgViewer">
                    <input type="hidden" name="PictureIDs" id="PictureIDs"/>
                  <!--image-->
                </div>
                <div class=" row">
                    <div class="col-lg-12 col-xl-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">

                                @Html.TextAreaFor(model => model.ShortDescription, 4, 100, new { @class = "form-control", style = "width:100%;" })

                            </div>
                        </div>
                    </div>
                </div>
                <div class=" row">
                    <div class="col-lg-12 col-xl-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.LongDescription, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">

                                @Html.TextAreaFor(model => model.LongDescription, 8, 100, new { @class = "form-control", style = "width:100%;" })

                            </div>
                        </div>
                    </div>
                </div>
                <div class="kt-login__title text-center mt-3 kt-mb-15">
                    <div class="kt-divider">
                        <span></span>
                        <h4 class="p-3"><span>Vehicle Information</span></h4>
                        <span></span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedManufacturer, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="fa fa-car-side"></i></span></div>
                                @Html.DropDownListFor(x => Model.SelectedManufacturer, Model.VehicleManufacturerList as SelectList, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-xl-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedModel, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                <div class="input-group-prepend"><span class="input-group-text"><i class="fa fa-car-side"></i></span></div>
                                @Html.DropDownListFor(x => Model.SelectedModel, Model.VehicleModelList as SelectList, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-xl-6">
                        @Html.LabelFor(model => model.startYear, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group date">
                            @Html.EditorFor(model => model.startYear, new { htmlAttributes = new { @class = "form-control datepicker", @readonly = "readonly" } })
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <i class="la la-calendar-check-o"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-xl-6">
                        @Html.LabelFor(model => model.EndYear, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group date">
                            @Html.EditorFor(model => model.EndYear, new { htmlAttributes = new { @class = "form-control datepicker", @readonly = "readonly" } })
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <i class="la la-calendar-check-o"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="kt-separator kt-separator--md kt-separator--dashed"></div>
                <div class="row">
                    <div class="col-lg-12">
                        <button class="btn btn-dark btn-brand--icon pageButtons" id="AddNew" type="button">
                            <span>
                                <i class="la la-plus"></i>
                                <span>Add New</span>
                            </span>
                        </button>
                        &nbsp;&nbsp;
                        <button class="btn btn-secondary btn-secondary--icon" id="kt_reset" type="reset">
                            <span>
                                <i class="la la-close"></i>
                                <span>Cancel</span>
                            </span>
                        </button>
                    </div>
                </div>
            </form>
            <!--begin: Datatable -->
            <!--end: Datatable -->
        </div>
    </div>
</div>
<script>
/*Start Date picker*/
    $('.datepicker').datepicker({

        format: "yyyy",
        viewMode: "years",
        minViewMode: "years",
        startDate:'-80y',
        autoclose: true,
        clearBtn: true

        //format: 'mm/dd/yyyy',
        //startDate: '-3d'
    });
    /*end Date picker*/

    $("#ProductImages").change(function () {
        var picx = this.files;
        debugger
        var PicsData = new FormData();
        for (var i = 0; i <= picx.length; i++){
            PicsData.append("Pictures", picx[i]);
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("AddImages", "PartsProducts")',
            data: PicsData,
            datatype: "json",
            processData: false,
            contentType: false
        })
            .done(function (responses) {
                //var PicIds = '';
                for (var i = 0; i < responses.length; i++) {
                    var PicResponse = responses[i];
                    debugger;
                    AttachNewImage(PicResponse.PicURL, PicResponse.ID);
                    
                    debugger;
                    //var ImgHtml = "<img class='img-fluid' src='/AutoImages/" + PicResponse.PicURL + "'/>";
                    //$("#imgViewer").append(ImgHtml);
                    //PicIds = PicIds + "," + PicResponse.ID;
                }
                //$("#PictureIDs").val(PicIds);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("FAIL");
            });
    });


    $(document).ready(function () {
        $('#SelectedPartsProductCategory').change(function () {
            var SelectedPartsProductCategory = $("#SelectedPartsProductCategory").val();
            var SelectedPartsProductSubCategory = $('#SelectedPartsProductSubCategory');
            SelectedPartsProductSubCategory.empty();
            if (SelectedPartsProductCategory != null && SelectedPartsProductCategory != '') {
                $.getJSON('@Url.Action("GetSubCategories")', { SelectedPartsProductCategoryId: SelectedPartsProductCategory }, function (Moldels) {
                    if (Moldels != null && !jQuery.isEmptyObject(Moldels))
                    {
                        $.each(Moldels, function (index, model) {
                            SelectedPartsProductSubCategory.append($('<option/>', {
                                value: model.Value,
                                text: model.Text
                            }));
                        });
                    }
                });
            }
        });
    });


    $(document).ready(function () {
        $('#SelectedPartsProductSubCategory').change(function () {
            var SelectedPartsProductSubCategory = $("#SelectedPartsProductSubCategory").val();
            var SelectedPartProductManufacturer = $('#SelectedPartProductManufacturer');
            SelectedPartProductManufacturer.empty();
            if (SelectedPartsProductSubCategory != null && SelectedPartsProductSubCategory != '') {
                $.getJSON('@Url.Action("GetPPManufacturer")', function (Moldels) {
                    if (Moldels != null && !jQuery.isEmptyObject(Moldels))
                    {
                        $.each(Moldels, function (index, model) {
                            SelectedPartProductManufacturer.append($('<option/>', {
                                value: model.Value,
                                text: model.Text
                            }));
                        });
                    }
                });
            }
        });
    });


    $(document).ready(function () {
         $('#SelectedManufacturer').change(function () {
             var selectedManufacturer = $("#SelectedManufacturer").val();
             var SelectedModel = $('#SelectedModel');
             SelectedModel.empty();
             if (selectedManufacturer != null && selectedManufacturer != '') {
                 $.getJSON('@Url.Action("GetModels")', { selectedManufacturerId: selectedManufacturer }, function (Moldels) {
                     if (Moldels != null && !jQuery.isEmptyObject(Moldels))
                        {
                            $.each(Moldels, function (index, model) {
                                SelectedModel.append($('<option/>', {
                                    value: model.Value,
                                    text: model.Text
                                }));
                            });
                        }
                    });
                }
            });
    });


    var rendered = false;
    $("#AddNew").click(function () {
        var ImagesIds = [];
        $("#imgViewer .AutoImage").each(function () {
            var ImageId = $(this).attr("data-id")
            ImagesIds.push(ImageId);
        });
        $("#PictureIDs").val(ImagesIds.join());
        $.ajax({
            type: "POST",
            url: '@Url.Action("AddNew", "PartsProducts")',
            data: $("#AddNewPartsProducts").serialize()
        })
            .done(function (response) {
                $('#tableContiner').html(response);
                Swal.fire({
                    text: 'Successfully Added',
                })
                rendered = true;
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("FAIL");
            });
        $('#AddNewContainer').html("");
        rendered = false;
    });

        function AttachNewImage(ImageName,ImageID) {
        var $ImgHtml = $("#ImageTemplate").clone();
        $ImgHtml.find(".AutoImage").attr("src", "/AutoImages/" + ImageName);
            $ImgHtml.find(".AutoImage").attr("data-id", ImageID);
            $ImgHtml.find(".DeleteImage").attr("data-id", ImageID);
            $("#imgViewer").append($ImgHtml.html());
           // RemoveImagesOnclick();

    }
</script>